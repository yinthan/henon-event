{"ast":null,"code":"var _jsxFileName = \"/Users/ethan/WebstormProjects/frontend/src/components/EventTimeline.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Timeline } from 'vis-timeline/standalone';\nimport 'vis-timeline/styles/vis-timeline-graph2d.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventTimeline = ({\n  events\n}) => {\n  _s();\n  const timelineRef = useRef();\n  const containerRef = useRef(null);\n  useEffect(() => {\n    if (containerRef.current && !timelineRef.current) {\n      const items = new vis.DataSet(events.map(event => ({\n        id: event.id,\n        content: event.title,\n        start: event.startDate,\n        end: event.endDate,\n        type: 'range',\n        style: `background-color: ${event.color}; color: white;` // Use the color from the event or any logic you define\n      })));\n      const options = {\n        // Options for customization\n        stack: false,\n        showCurrentTime: true,\n        zoomMin: 1000 * 60 * 60 * 24,\n        // one day in milliseconds\n        tooltip: {\n          followMouse: true,\n          overflowMethod: 'cap'\n        },\n        horizontalScroll: true,\n        zoomKey: 'ctrlKey',\n        maxHeight: '400px'\n      };\n      timelineRef.current = new Timeline(containerRef.current, items, options);\n\n      // This will ensure the timeline fits the range of your items\n      timelineRef.current.fit();\n    }\n    return () => {\n      if (timelineRef.current) {\n        timelineRef.current.destroy();\n      }\n    };\n  }, [events]); // Re-run the effect if events change\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    style: {\n      height: '400px',\n      width: '100%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 12\n  }, this);\n};\n_s(EventTimeline, \"QvzQ7yY0M4ISTj0VZfuA8jd0z5E=\");\n_c = EventTimeline;\nexport default EventTimeline;\nvar _c;\n$RefreshReg$(_c, \"EventTimeline\");","map":{"version":3,"names":["React","useEffect","useRef","Timeline","jsxDEV","_jsxDEV","EventTimeline","events","_s","timelineRef","containerRef","current","items","vis","DataSet","map","event","id","content","title","start","startDate","end","endDate","type","style","color","options","stack","showCurrentTime","zoomMin","tooltip","followMouse","overflowMethod","horizontalScroll","zoomKey","maxHeight","fit","destroy","ref","height","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ethan/WebstormProjects/frontend/src/components/EventTimeline.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Timeline } from 'vis-timeline/standalone';\nimport 'vis-timeline/styles/vis-timeline-graph2d.min.css';\n\nconst EventTimeline = ({ events }) => {\n    const timelineRef = useRef();\n    const containerRef = useRef(null);\n\n    useEffect(() => {\n        if (containerRef.current && !timelineRef.current) {\n            const items = new vis.DataSet(\n                events.map(event => ({\n                    id: event.id,\n                    content: event.title,\n                    start: event.startDate,\n                    end: event.endDate,\n                    type: 'range',\n                    style: `background-color: ${event.color}; color: white;`, // Use the color from the event or any logic you define\n                }))\n            );\n\n            const options = {\n                // Options for customization\n                stack: false,\n                showCurrentTime: true,\n                zoomMin: 1000 * 60 * 60 * 24, // one day in milliseconds\n                tooltip: {\n                    followMouse: true,\n                    overflowMethod: 'cap',\n                },\n                horizontalScroll: true,\n                zoomKey: 'ctrlKey',\n                maxHeight: '400px',\n            };\n\n            timelineRef.current = new Timeline(containerRef.current, items, options);\n\n            // This will ensure the timeline fits the range of your items\n            timelineRef.current.fit();\n        }\n\n        return () => {\n            if (timelineRef.current) {\n                timelineRef.current.destroy();\n            }\n        };\n    }, [events]); // Re-run the effect if events change\n\n    return <div ref={containerRef} style={{ height: '400px', width: '100%' }} />;\n};\n\nexport default EventTimeline;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,QAAQ,QAAQ,yBAAyB;AAClD,OAAO,kDAAkD;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAClC,MAAMC,WAAW,GAAGP,MAAM,CAAC,CAAC;EAC5B,MAAMQ,YAAY,GAAGR,MAAM,CAAC,IAAI,CAAC;EAEjCD,SAAS,CAAC,MAAM;IACZ,IAAIS,YAAY,CAACC,OAAO,IAAI,CAACF,WAAW,CAACE,OAAO,EAAE;MAC9C,MAAMC,KAAK,GAAG,IAAIC,GAAG,CAACC,OAAO,CACzBP,MAAM,CAACQ,GAAG,CAACC,KAAK,KAAK;QACjBC,EAAE,EAAED,KAAK,CAACC,EAAE;QACZC,OAAO,EAAEF,KAAK,CAACG,KAAK;QACpBC,KAAK,EAAEJ,KAAK,CAACK,SAAS;QACtBC,GAAG,EAAEN,KAAK,CAACO,OAAO;QAClBC,IAAI,EAAE,OAAO;QACbC,KAAK,EAAG,qBAAoBT,KAAK,CAACU,KAAM,iBAAgB,CAAE;MAC9D,CAAC,CAAC,CACN,CAAC;MAED,MAAMC,OAAO,GAAG;QACZ;QACAC,KAAK,EAAE,KAAK;QACZC,eAAe,EAAE,IAAI;QACrBC,OAAO,EAAE,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;QAAE;QAC9BC,OAAO,EAAE;UACLC,WAAW,EAAE,IAAI;UACjBC,cAAc,EAAE;QACpB,CAAC;QACDC,gBAAgB,EAAE,IAAI;QACtBC,OAAO,EAAE,SAAS;QAClBC,SAAS,EAAE;MACf,CAAC;MAED3B,WAAW,CAACE,OAAO,GAAG,IAAIR,QAAQ,CAACO,YAAY,CAACC,OAAO,EAAEC,KAAK,EAAEe,OAAO,CAAC;;MAExE;MACAlB,WAAW,CAACE,OAAO,CAAC0B,GAAG,CAAC,CAAC;IAC7B;IAEA,OAAO,MAAM;MACT,IAAI5B,WAAW,CAACE,OAAO,EAAE;QACrBF,WAAW,CAACE,OAAO,CAAC2B,OAAO,CAAC,CAAC;MACjC;IACJ,CAAC;EACL,CAAC,EAAE,CAAC/B,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEd,oBAAOF,OAAA;IAAKkC,GAAG,EAAE7B,YAAa;IAACe,KAAK,EAAE;MAAEe,MAAM,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAO;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAChF,CAAC;AAACrC,EAAA,CA7CIF,aAAa;AAAAwC,EAAA,GAAbxC,aAAa;AA+CnB,eAAeA,aAAa;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}