{"ast":null,"code":"var _jsxFileName = \"/Users/ethan/WebstormProjects/frontend/src/components/EventTimeline.js\";\nimport React from 'react';\nimport Timeline from 'react-calendar-timeline';\nimport 'react-calendar-timeline/lib/Timeline.css';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventTimeline = ({\n  events\n}) => {\n  const timelineEvents = events.map(event => ({\n    id: event.id,\n    title: event.title,\n    start_time: moment(event.startDate),\n    end_time: moment(event.endDate),\n    itemProps: {\n      style: {\n        background: 'rgba(33, 150, 243, 0.8)',\n        // Changed to a darker color for better visibility\n        color: 'black'\n      }\n    }\n  }));\n  const groups = events.map(event => ({\n    id: event.id,\n    title: event.title\n  }));\n\n  // Calculate the overall range of the timeline based on events\n  let minStartTime = moment();\n  let maxEndTime = moment().add(1, 'month'); // default end time to one month from now\n\n  if (events.length > 0) {\n    minStartTime = moment(events[0].startDate); // assume first event start is the earliest\n    maxEndTime = moment(events[0].endDate); // assume first event end is the latest\n\n    events.forEach(event => {\n      if (moment(event.startDate).isBefore(minStartTime)) {\n        minStartTime = moment(event.startDate);\n      }\n      if (moment(event.endDate).isAfter(maxEndTime)) {\n        maxEndTime = moment(event.endDate);\n      }\n    });\n\n    // Add some buffer around the range\n    minStartTime.subtract(1, 'week');\n    maxEndTime.add(1, 'week');\n  }\n  return /*#__PURE__*/_jsxDEV(Timeline, {\n    groups: groups,\n    items: timelineEvents,\n    defaultTimeStart: minStartTime,\n    defaultTimeEnd: maxEndTime,\n    unit: \"day\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n_c = EventTimeline;\nexport default EventTimeline;\nvar _c;\n$RefreshReg$(_c, \"EventTimeline\");","map":{"version":3,"names":["React","Timeline","moment","jsxDEV","_jsxDEV","EventTimeline","events","timelineEvents","map","event","id","title","start_time","startDate","end_time","endDate","itemProps","style","background","color","groups","minStartTime","maxEndTime","add","length","forEach","isBefore","isAfter","subtract","items","defaultTimeStart","defaultTimeEnd","unit","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ethan/WebstormProjects/frontend/src/components/EventTimeline.js"],"sourcesContent":["import React from 'react';\nimport Timeline from 'react-calendar-timeline';\nimport 'react-calendar-timeline/lib/Timeline.css';\nimport moment from 'moment';\n\nconst EventTimeline = ({ events }) => {\n    const timelineEvents = events.map(event => ({\n        id: event.id,\n        title: event.title,\n        start_time: moment(event.startDate),\n        end_time: moment(event.endDate),\n        itemProps: {\n            style: {\n                background: 'rgba(33, 150, 243, 0.8)', // Changed to a darker color for better visibility\n                color: 'black',\n            },\n        },\n    }));\n\n    const groups = events.map(event => ({\n        id: event.id,\n        title: event.title,\n    }));\n\n    // Calculate the overall range of the timeline based on events\n    let minStartTime = moment();\n    let maxEndTime = moment().add(1, 'month'); // default end time to one month from now\n\n    if (events.length > 0) {\n        minStartTime = moment(events[0].startDate); // assume first event start is the earliest\n        maxEndTime = moment(events[0].endDate); // assume first event end is the latest\n\n        events.forEach(event => {\n            if (moment(event.startDate).isBefore(minStartTime)) {\n                minStartTime = moment(event.startDate);\n            }\n            if (moment(event.endDate).isAfter(maxEndTime)) {\n                maxEndTime = moment(event.endDate);\n            }\n        });\n\n        // Add some buffer around the range\n        minStartTime.subtract(1, 'week');\n        maxEndTime.add(1, 'week');\n    }\n\n    return (\n        <Timeline\n            groups={groups}\n            items={timelineEvents}\n            defaultTimeStart={minStartTime}\n            defaultTimeEnd={maxEndTime}\n            unit=\"day\"\n        />\n    );\n};\n\nexport default EventTimeline;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,yBAAyB;AAC9C,OAAO,0CAA0C;AACjD,OAAOC,MAAM,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAClC,MAAMC,cAAc,GAAGD,MAAM,CAACE,GAAG,CAACC,KAAK,KAAK;IACxCC,EAAE,EAAED,KAAK,CAACC,EAAE;IACZC,KAAK,EAAEF,KAAK,CAACE,KAAK;IAClBC,UAAU,EAAEV,MAAM,CAACO,KAAK,CAACI,SAAS,CAAC;IACnCC,QAAQ,EAAEZ,MAAM,CAACO,KAAK,CAACM,OAAO,CAAC;IAC/BC,SAAS,EAAE;MACPC,KAAK,EAAE;QACHC,UAAU,EAAE,yBAAyB;QAAE;QACvCC,KAAK,EAAE;MACX;IACJ;EACJ,CAAC,CAAC,CAAC;EAEH,MAAMC,MAAM,GAAGd,MAAM,CAACE,GAAG,CAACC,KAAK,KAAK;IAChCC,EAAE,EAAED,KAAK,CAACC,EAAE;IACZC,KAAK,EAAEF,KAAK,CAACE;EACjB,CAAC,CAAC,CAAC;;EAEH;EACA,IAAIU,YAAY,GAAGnB,MAAM,CAAC,CAAC;EAC3B,IAAIoB,UAAU,GAAGpB,MAAM,CAAC,CAAC,CAACqB,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;;EAE3C,IAAIjB,MAAM,CAACkB,MAAM,GAAG,CAAC,EAAE;IACnBH,YAAY,GAAGnB,MAAM,CAACI,MAAM,CAAC,CAAC,CAAC,CAACO,SAAS,CAAC,CAAC,CAAC;IAC5CS,UAAU,GAAGpB,MAAM,CAACI,MAAM,CAAC,CAAC,CAAC,CAACS,OAAO,CAAC,CAAC,CAAC;;IAExCT,MAAM,CAACmB,OAAO,CAAChB,KAAK,IAAI;MACpB,IAAIP,MAAM,CAACO,KAAK,CAACI,SAAS,CAAC,CAACa,QAAQ,CAACL,YAAY,CAAC,EAAE;QAChDA,YAAY,GAAGnB,MAAM,CAACO,KAAK,CAACI,SAAS,CAAC;MAC1C;MACA,IAAIX,MAAM,CAACO,KAAK,CAACM,OAAO,CAAC,CAACY,OAAO,CAACL,UAAU,CAAC,EAAE;QAC3CA,UAAU,GAAGpB,MAAM,CAACO,KAAK,CAACM,OAAO,CAAC;MACtC;IACJ,CAAC,CAAC;;IAEF;IACAM,YAAY,CAACO,QAAQ,CAAC,CAAC,EAAE,MAAM,CAAC;IAChCN,UAAU,CAACC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC;EAC7B;EAEA,oBACInB,OAAA,CAACH,QAAQ;IACLmB,MAAM,EAAEA,MAAO;IACfS,KAAK,EAAEtB,cAAe;IACtBuB,gBAAgB,EAAET,YAAa;IAC/BU,cAAc,EAAET,UAAW;IAC3BU,IAAI,EAAC;EAAK;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACb,CAAC;AAEV,CAAC;AAACC,EAAA,GAlDIhC,aAAa;AAoDnB,eAAeA,aAAa;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}